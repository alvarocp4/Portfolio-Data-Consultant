---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href, class: className, ...props } = Astro.props;
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^#]+/g);
const url = new URL(Astro.url.href);
const hash = url.hash; // "#skills"
const isActive = href === pathname || href === '/' + (subpath?.[0] || '') || href === hash;
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<script is:inline>
  function initScrollSpy() {
    const sections = Array.from(document.querySelectorAll('section[id]'));
    const navLinks = Array.from(document.querySelectorAll('a[href^="#"]'));

    function updateActiveLink() {
      const scrollPos = window.scrollY + window.innerHeight / 3; // ajustar punto de activaciÃ³n

      let currentId = '';
      sections.forEach(section => {
        const top = section.offsetTop;
        const height = section.offsetHeight;
        if (scrollPos >= top && scrollPos < top + height) {
          currentId = section.id;
        }
      });

      navLinks.forEach(link => {
        link.classList.toggle('active', link.getAttribute('href') === `#${currentId}`);
      });
    }

    window.addEventListener('scroll', updateActiveLink);
    window.addEventListener('resize', updateActiveLink);
    window.addEventListener('load', updateActiveLink);
  }

  window.addEventListener('load', initScrollSpy);
</script>


<style>
	a {
		display: inline-block;
		text-decoration: none;
	}
	a.active {
		font-weight: bolder;
		text-decoration: underline;
	}
</style>